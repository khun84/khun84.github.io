result.simplified <- route.vec(route.df$start,route.df$end, mode='driving', structure = 'legs')
result.simplified
class(result.simplified)
result
unlist(result, recursive = F)
result
length(result)
start
end
route.df
geocode(route.df$start)
start.df <- geocode(route.df$start)
as.list(start.df)
start.ls <- list(rep(NA, 4))
start.ls
start.ls <- as.list(rep(NA, 4))
start.ls
start.df[1,]
as.numeric(start.df[1,])
c(start.df[1,])
c(start.df[1,]) %>% class
route.df
start.df
end.df <- geocode(route.df$end)
end.df
end.df %>% class
start.ls
start.df
start.ls <- list(c(101.7259,3.106845), c(101.6188,3.032715))
start.ls
end.df
end.ls <- list(c(101.6188,3.032715), c(101.5945,3.127887))
route.vec(start.ls, end.ls, mode = 'driving')
route.vec <- Vectorize(route, vectorize.args = c('from', 'to'), SIMPLIFY = F)
result2 <- route.vec(start.ls, end.ls, mode = 'driving')
result2
route.df
start.df
end.df
result2
start.df
start.ls
end.df
end.ls
as.list(rep(NA, 4))
dummy.df <- as.list(rep(NA, 11))
data.frame(dummy.df)
result2[[2]] %>% result
result2[[2]] %>% str
dummy.df <- data.frame(1 = numeric(),2 = numeric(),3 = numeric(),4 = numeric(),5 = numeric(),6 = numeric(),7= numeric(),8=numeric(),9= numeric(),10= numeric(),11 = numeric())
dummy.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric(),numeric(),numeric(),numeric(),numeric(),integer())
dummy.df
colnames(dummy.df) <- colnames(result[[1]])
dummy.df
cbind(dummy.df, result[[1]])
rbind(dummy.df, result[[1]])
parse(text = colnames(dummy.df))
route.df
route1 <- result2[[1]]
route1
paste(route1$m, route1$km)
paste(route1$m, route1$km, ',')
paste(route1$m, route1$km, sep = ',')
mapply(c, route1$m, route$km)
mapply(c, route1$m, route1$km)
mapply(c, route1$m, route1$km) %>% as.list()
mapply(c, route1$m, route1$km) %>% list
mapply(c, route1$m, route1$km)
mapply(c, route1$m, route1$km) %>% apply(2, c)
mapply(c, route1$m, route1$km) %>% apply(2, list)
lapply(route1[,1:2], c)
apply(route1[,1:2], 1, list)
apply(route1[,1:2], 1, c)
list(route1[,1:2])
list(route1[,1],route[,2])
list(route1[,1],route1[,2])
as.list(paste(route1$m, route1$km))
mapply(list, route1$m, route1$km,SIMPLIFY = F)
mapply(list, route1$m, route1$km,SIMPLIFY = T)
mapply(list, route1$m, route1$km,SIMPLIFY = T)[[1]] %>% length
mapply(list, route1$m, route1$km,SIMPLIFY = T) %>% length
dim(route1)
> x <- 1:3
> y <- 4:6
x=1:3
y=4:6
list(x, y)
mapply(list, x, y, SIMPLIFY=F)
mapply(list, x, y, SIMPLIFY=F) %>% length
mapply(list, route1[[1]], route1[[2]], SIMPLIFY=F) %>% length
mapply(list, as.numeric(route1$m), as.numeric(route1$km), SIMPLIFY=F) %>% length
myroute
myroute
route.seq <- c('cheras', 'puchong', 'petaling jaya', 'shah alam')
route.df <- data.frame(start=route.seq[1:length(route.seq)-1], end = route.seq[2:length(route.seq)])
route.df$id <- ncol(route.df) %>% seq %>% as.numeric
route.vec <- Vectorize(route, vectorize.args = c('from','to'), SIMPLIFY = F)
route.ls <- route.vec(route.df$start, route.df$end, mode = 'driving', structure='legs')
route.seq <- c('cheras', 'puchong', 'petaling jaya', 'shah alam')
route.df <- data.frame(start=route.seq[1:length(route.seq)-1], end = route.seq[2:length(route.seq)])
route.df$id <- nrow(route.df) %>% seq %>% as.numeric
route.vec <- Vectorize(route, vectorize.args = c('from','to'), SIMPLIFY = F)
route.ls <- route.vec(route.df$start, route.df$end, mode = 'driving', structure='legs')
route.df
route.vec(route.df$start, route.df$end)
str(route.df)
route.seq <- c('cheras', 'puchong', 'petaling jaya', 'shah alam')
route.df <- data.frame(start=route.seq[1:length(route.seq)-1], end = route.seq[2:length(route.seq)]
, stringsAsFactors = F)
route.df$id <- nrow(route.df) %>% seq %>% as.numeric
route.vec <- Vectorize(route, vectorize.args = c('from','to'), SIMPLIFY = F)
route.ls <- route.vec(route.df$start, route.df$end, mode = 'driving', structure='legs')
route.ls
route.ls %>% length
route.ls[1]
route.ls[[1]]
lapply(seq(length(route.ls)), function(i,route.ls) {df <- route.ls[[i]]; df$id=i;route.df <- rbind(route.df,df); return()})
route.ls
lapply(seq(length(route.ls)), function(i) {df <- route.ls[[i]]; df$id=i;route.df <- rbind(route.df,df); return()})
dim(route.df)
lapply(seq(length(route.ls)), function(i) {df <- route.ls[[i]]; df$id=i;dummy.df <- rbind(dummy.df,df); return()})
dummy.df
lapply(seq(length(route.ls)), function(i) {df <- route.ls[[i]]; df$id=i;dummy.df <<- rbind(dummy.df,df); return()})
dummy.df
loc <- as.numeric(route.df[1,1:2])
loc
route.df
route.df[1,1:2]
as.numeric(route.df[1,1:2])
route.df[1,1:2] %>% unlist
route.df[1,1:2] %>% unlist %>% class
dummy.df[1, c('startLon', 'startLat')]
dummy.df[1, c('startLon', 'startLat')] %>% unlist
dummy.df[1, c('startLon', 'startLat')] %>% unlist
loc <- result.df[1, c('startLon', 'startLat')] %>% unlist
names(loc) <- c('lon', 'lat')
result.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric()
,numeric(),numeric(),numeric(),numeric(),integer(), numeric())
lapply(seq(length(route.ls)), function(i) {df <- route.ls[[i]]; df$id=i;dummy.df <<- rbind(result.df,df); return()})
loc <- result.df[1, c('startLon', 'startLat')] %>% unlist
names(loc) <- c('lon', 'lat')
result.df
result.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric()
,numeric(),numeric(),numeric(),numeric(),integer(), numeric())
lapply(seq(length(route.ls)), function(i) {df <- route.ls[[i]]; df$id=i;result.df <<- rbind(result.df,df); return()})
loc <- result.df[1, c('startLon', 'startLat')] %>% unlist
names(loc) <- c('lon', 'lat')
loc
qmap(loc, zoom = 10, maptype = 'roadmap', color = 'bw'
) + geom_leg(aes(x = startLon, y = startLat, xend = endLon, yend = endLat, color = as.factor(id)), data = legs_df)
qmap(loc, zoom = 10, maptype = 'roadmap', color = 'bw'
) + geom_leg(aes(x = startLon, y = startLat, xend = endLon, yend = endLat,
color = as.factor(as.character(id))), data = result.df)
qmap(loc, zoom = 12, maptype = 'roadmap', color = 'bw'
) + geom_leg(aes(x = startLon, y = startLat, xend = endLon, yend = endLat,
color = as.factor(as.character(id))), data = result.df)
qmap(loc, zoom = 11, maptype = 'roadmap', color = 'bw'
) + geom_leg(aes(x = startLon, y = startLat, xend = endLon, yend = endLat,
color = as.factor(as.character(id))), data = result.df)
qmplot(x = startLon, y = startLon, xend = endLon, yend=endLat,
data = result.df, color = as.factor(as.character(id)))
qmplot(x = startLon, y = startLon, xend = endLon, yend=endLat,geom='segment',
data = result.df, color = as.factor(as.character(id)))
qmplot(x = startLon, y = startLon, xend = endLon, yend=endLat,geom='segment',
data = result.df)
qmplot(x = startLon, y = startLon, xend = endLon, yend=endLat,geom='segment', zoom = 10
data = result.df)
qmplot(x = startLon, y = startLon, xend = endLon, yend=endLat,geom='segment', zoom = 10,
data = result.df)
head(result.df)
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 10,
data = result.df)
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 12,
data = result.df)
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 12,
data = result.df, color = as.factor(as.character(id)))
library(data.table)
result.dt <- data.table(result.df)
result.dt[,.SD[1], id]
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 12,
data = result.df, color = as.factor(as.character(id)), size = 2)
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 12,
data = result.df, color = as.factor(as.character(id)), size = I(1))
route.ls.path <- route.vec(route.df$start, route.df$end, mode = 'driving', structure='route')
route.ls.path
route.ls <- route.vec(route.df$start, route.df$end, mode = 'driving', structure='route')
legs.col_name <- c(m, km, miles, seconds, minutes, hours, startLon, startLat, endLon, endLat, leg, id)
result.legs.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric()
,numeric(),numeric(),numeric(),numeric(),integer(), numeric())
colnames(result.legs.df) <- legs.col.name
route.col_name <- c(m, km, miles, seconds, minutes, hours, leg, lon, lat, id)
result.route.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric()
,integer(), numeric(), numeric(), numeric())
colnames(result.route.df) <- route.col.name
legs.col.name <- c(m, km, miles, seconds, minutes, hours, startLon, startLat, endLon, endLat, leg, id)
result.legs.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric()
,numeric(),numeric(),numeric(),numeric(),integer(), numeric())
colnames(result.legs.df) <- legs.col.name
legs.col.name <- c('m', 'km', 'miles', 'seconds', 'minutes', 'hours', 'startLon', 'startLat', 'endLon', 'endLat', 'leg', 'id')
result.legs.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric()
,numeric(),numeric(),numeric(),numeric(),integer(), numeric())
colnames(result.legs.df) <- legs.col.name
lapply(seq(length(legs.ls)), function(i) {df <- legs.ls[[i]]; df$id=i;result.legs.df <<- rbind(result.legs.df,df); return()})
legs.ls <- route.vec(route.df$start, route.df$end, mode = 'driving', structure='legs')
lapply(seq(length(legs.ls)), function(i) {df <- legs.ls[[i]]; df$id=i;result.legs.df <<- rbind(result.legs.df,df); return()})
route.col.name <- c('m', 'km', 'miles', 'seconds', 'minutes', 'hours', 'leg', 'lon', 'lat', 'id')
result.route.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric()
,integer(), numeric(), numeric(), numeric())
colnames(result.route.df) <- route.col.name
lapply(seq(length(route.ls)), function(i) {df <- route.ls[[i]]; df$id=i;result.route.df <<- rbind(result.route.df,df); return()})
result.route.dt <- data.table(result.route.df)
loc.dt <- result.route.dt[,.SD[1], id]
loc.dt
result.route.dt
result.route.dt[,.SD[.N]]
loc.dt <- rbind(loc.dt, result.route.dt[.SD[.N]])
loc.dt
loc.dt
setorder(loc.dt, colnames(loc.dt)[2:ncol(loc.dt)], colnames(loc.dt)[1])
loc.dt
setcolorder(loc.dt, 2:ncol(loc.dt), 1)
setcolorder(loc.dt, c(2:ncol(loc.dt), 1))
loc.dt
loc.dt <- rbind(loc.dt, result.route.dt[.SD[.N]])
loc.dt
head(result.route.dt[.SD[.N]])
head(result.route.dt[,.SD[.N]])
loc.dt <- rbind(loc.dt, result.route.dt[,.SD[.N]])
loc.dt
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1)) + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6)
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1)) + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6))
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1))
head(result.route.df)
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round')
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6)
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6, size = 3)
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6, size = 6)
loc.dt
loc.dt$location <- route.seq
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6, size = 6) + geom_text(
data=loc.dt, aes(x = lon, y = lat, label = location), family='Panton')
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6, size = 6) + geom_text(
data=loc.dt, aes(x = lon, y = lat, label = location),color = 'black', family='Panton', nudge_y = -1)
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6, size = 6) + geom_text(
data=loc.dt, aes(x = lon, y = lat, label = location),color = 'black', family='Panton', nudge_y = -.05)
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6, size = 6) + geom_text(
data=loc.dt, aes(x = lon, y = lat, label = location),color = 'black', family='Panton', nudge_y = -.005)
qmplot(x = lon, y = lat,geom='path', zoom = 13,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6, size = 6) + geom_text(
data=loc.dt, aes(x = lon, y = lat, label = location),color = 'black', family='Panton', nudge_y = -.005)
route.all <- route('klcc, kuala lumpur', 'ioi mall, puchong', mode='driving', output = 'all', structure='route')
route.all
decodeLine <- function(encoded){
require(bitops)
vlen <- nchar(encoded)
vindex <- 0
varray <- NULL
vlat <- 0
vlng <- 0
while(vindex < vlen){
vb <- NULL
vshift <- 0
vresult <- 0
repeat{
if(vindex + 1 <= vlen){
vindex <- vindex + 1
vb <- as.integer(charToRaw(substr(encoded, vindex, vindex))) - 63
}
vresult <- bitOr(vresult, bitShiftL(bitAnd(vb, 31), vshift))
vshift <- vshift + 5
if(vb < 32) break
}
dlat <- ifelse(
bitAnd(vresult, 1)
, -(bitShiftR(vresult, 1)+1)
, bitShiftR(vresult, 1)
)
vlat <- vlat + dlat
vshift <- 0
vresult <- 0
repeat{
if(vindex + 1 <= vlen) {
vindex <- vindex+1
vb <- as.integer(charToRaw(substr(encoded, vindex, vindex))) - 63
}
vresult <- bitOr(vresult, bitShiftL(bitAnd(vb, 31), vshift))
vshift <- vshift + 5
if(vb < 32) break
}
dlng <- ifelse(
bitAnd(vresult, 1)
, -(bitShiftR(vresult, 1)+1)
, bitShiftR(vresult, 1)
)
vlng <- vlng + dlng
varray <- rbind(varray, c(vlat * 1e-5, vlng * 1e-5))
}
coords <- data.frame(varray)
names(coords) <- c("lat", "lon")
coords
}
route_df <- decodeLine( route.all$routes[[1]]$overview_polyline$points )
route_df
route.all
class(route.all)
dim(route_df)
route.all[[1]]$legs
route.all$routes
route.all$routes[[1]]
route.all$routes$legs
route.all$routes[[1]]$legs
route.all$routes[[1]]$legs[[1]]
route.all$routes[[1]]$legs[[1]]$steps
route.steps <- route.all$routes[[1]]$legs[[1]]$steps
route.steps
unlist(route.steps)
route.steps
route.steps[[1]]
route.steps[[1]] %>% length()
route.steps
route.steps.unlist <- unlist(route.steps)
length(route.steps.unlist)
route.steps
route.steps[[1]]
route.steps[[1]] %>% unlist %>% length
length(route.steps)
route.steps
route.steps[[1]]
route.steps[[1]]$distance$value
route.all
route.all[[1]]$steps
route.all[[1]]$step
route.all[[1]]
route.all
route.all[[1]]
route.all$routes
route.all$routes$legs
route.all$routes
route.all$routes[[1]]
route.all$routes[[1]]$legs
route.all$routes[[1]]$legs[[1]]$steps
route.all$routes[[1]]$legs[[1]]$steps[[1]]
route.steps <- route.all$routes[[1]]$legs[[1]]$steps
length(route.steps)
head(route_df)
qmplot(x=lat,y=lon,data=route_df, zoom=10, geom='path', linejoin='round',size=I(1), color=I('red'))
route_df
qmplot(x=lon,y=lat,data=route_df, zoom=10, geom='path', linejoin='round',size=I(1), color=I('red'))
qmplot(x=lon,y=lat,data=route_df, zoom=12, geom='path', linejoin='round',size=I(1), color=I('red'))
qmplot(x=lon,y=lat,data=route_df, zoom=13, geom='path', linejoin='round',size=I(1), color=I('red'))
qmplot(x=lon,y=lat,data=route_df, zoom=13, geom='path', linejoin='round',size=I(1), color=I('red'), alpha=.6)
library(rmarkdown)
?render_site
getwd()
setwd('/Users/Daniel/git_webpage/khun84.github.io')
render_site()
install.packages('kable')
library(knitr)
render_site()
render_site()
render_site()
?kable
parse(text = data)
deparse(data)
substitute(data) %>% deparse
render_site('index.Rmd')
source('~/.active-rstudio-document', echo=TRUE)
data.melt <- melt(data, id.vars = c('id', 'cluster'))
str(data)
data2 <- data
data2$l1 <- as.character(data2$l1)
data2$l2 <- as.character(data2$l2)
data2$l3 <- as.character(data2$l3)
melt(data2, id.vars=c('id', 'cluster'))
head(data.melt)
source('~/.active-rstudio-document', echo=TRUE)
dim(data)
dim(data.melt)
render_site()
render_site()
install.packages('flexdashboard')
install.packages('marmap')
install.packages('viridis')
?viriis
??viridis
?viridis
library(viridis)
?viridis
n = 200
image(
1:n, 1, as.matrix(1:n),
col = viridis(n, option = "D"),
xlab = "viridis n", ylab = "", xaxt = "n", yaxt = "n", bty = "n"
)
?image
install.packages('pdftools')
library(pdftools)
txt <- pdf_text('~/Downloads/invoice64322.pdf')
txt
txt <- pdf_toc('~/Downloads/invoice64322.pdf')
txt
install.packages('tabulizer')
library(devtools)
install_github('ropenscilabs/tabulizer')
?install_git
install_github('ropenscilabs/tabulizerjars')
install_github('ropenscilabs/tabulizerjars')
install_github('ropenscilabs/tabulizerjars')
install_github('ropenscilabs/tabulizer')
library(tabulizer)
tab  <- extract_tables('~/Downloads/invoice64322.pdf')
tab
?extract_tables
tab  <- extract_tables('~/Downloads/invoice64322.pdf', method = 'data.frame')
tab
tab  <- extract_tables('~/Downloads/invoice64322.pdf', method = 'asis')
str(tab)
tab
tab$get()
tab$toString()
tab$contains()
?tab$add()
?tab$add
?tab$toArray
tab$toArray()
args(tab$toArray())
functionBody(tab$toArray)
tab$toArray(a)
a  <- extract_tables('~/Downloads/invoice64322.pdf', method = 'asis')
?a
??a
?a
a$get(1)
a$get(0)
extract_tables('~/Downloads/invoice64322.pdf', method = 'asis', pages = 2)
extract_tables('~/Downloads/invoice64322.pdf', method = 'asis', pages = 1)
extract_tables('~/Downloads/invoice64322.pdf', pages = 1)
extract_text('~/Downloads/invoice64322.pdf')
extract_tables('~/Downloads/invoice64322.pdf', pages = c(1,1))
install.packages('AppliedPredictiveModeling')
install.packages('ElemStatLearn')
install.packages('pgmm')
install.packages('rpart')
render_site()
pwd
pwd()
getwd()
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
intrain <- createDataPartition(segmentationOriginal$Case, p = .7, list = F)
dim(segmentationOriginal)
length(intrain)
table(segmentationOriginal$Case)
segmentationOriginal$Class %>% table
train <- filter(segmentationOriginal, Case = 'training')
train <- filter(segmentationOriginal, Case == 'training')
head(train)
table(segmentationOriginal$Case)
train <- filter(segmentationOriginal, Case == 'Train')
dim(x = train)
training <- filter(segmentationOriginal, Case == 'Train')
testing <- filter(segmentationOriginal, Case =='Test')
tree.model <- train(segmentationOriginal,method = 'rpart')
set.seed(125)
tree.model <- train(Class~., data = segmentationOriginal, method='rpart')
str(tree.model)
names(tree.model)
tree.model$method
tree.model$methodType
tree.model$modelType
tree.model$control
names(tree.model)
str(tree.model$trainingData)
set.seed(125)
tree.model <- train(Class~., method = 'rpart', data = training)
predict(tree.model$finalModel, data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(tree.model$finalModel, data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2), type = 'class')
names(tree.model$finalModel)
tree.model$finalModel
tree.model$finalModel %>% names
tree.model$finalModel$splits
tree.model$finalModel$terms
sapply(segmentationOriginal, function(x) sum(is.na(x)))
library(rattle)
install.packages('rattle')
library(rattle)
head(installed.packages())
'RGtk2' %in% names(installed.packages())
install.packages('RGtk2')
library(rattle)
