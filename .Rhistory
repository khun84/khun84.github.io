get_map(auckland, zoom = 8, color = 'bw', source = 'stamen') + geom_leg(aes(x = startLon, y = startLat, xend = endLon, yend = endLat), data = legs_df)
get_map(auckland, zoom = 10, source = 'stamen')
head(route_df)
qmplot(aes(x = lon, y = lat), data = route_df, geom='path')
qmplot(x = lon, y = lat, data = route_df, geom='path')
qmplot(x = lon, y = lat, data = route_df, geom='segment')
qmplot(x = lon, y = lat, data = route_df, geom='segment') + geom_point(x = auckland$lon, auckland$lat)
auckland
str(auckland)
auckland['lon']
auckland[lon]
qmplot(x = lon, y = lat, data = route_df, geom='segment') + geom_point(x = auckland['lon'], auckland['lat'])
qmplot(x = lon, y = lat, data = route_df, geom='segment') + geom_point(aes(x = auckland['lon'], y = auckland['lat']))
qmplot(x = lon, y = lat, data = route_df, geom='path') + geom_point(aes(x = auckland['lon'], y = auckland['lat']))
auckland
qmplot(x = lon, y = lat, data = route_df, geom='path', zoom = 5)
qmplot(x = lon, y = lat, data = route_df, geom='path', zoom = 8)
qmplot(x = lon, y = lat, data = route_df, geom='path', zoom = 9)
auckland
auckland <- c(lon = 174.78504, lat = -37.00825)
waitomo <- geocode('waitomo cave')
waitomo
myroute=route(auckland, waitommo, mode = 'driving', structure = 'leg')
waitomo <- c(lon = 175.1145, lat = -38.26153)
myroute=route(auckland, waitomo, mode = 'driving', structure = 'leg')
myroute
start <- c('cheras', 'puchong', 'petaling jaya', 'shah alam')
loc <- c('cheras', 'puchong', 'petaling jaya', 'shah alam')
route.df <- data.frame(start=loc[1:3], end=loc[2:4])
route.df
route.vec <- Vectorize(route, vectorize.args = c('from', 'to'), SIMPLIFY = F)
route.df$start
route.df <- data.frame(start=loc[1:3], end=loc[2:4], stringsAsFactors = F)
result <- route.vec(route.df$start, route.df$end, mode = 'driving', structure = 'legs')
result
route.vec <- Vectorize(route, vectorize.args = c('from', 'to'), SIMPLIFY = T)
result.simplified <- route.vec(route.df$start,route.df$end, mode='driving', structure = 'legs')
result.simplified
class(result.simplified)
result
unlist(result, recursive = F)
result
length(result)
start
end
route.df
geocode(route.df$start)
start.df <- geocode(route.df$start)
as.list(start.df)
start.ls <- list(rep(NA, 4))
start.ls
start.ls <- as.list(rep(NA, 4))
start.ls
start.df[1,]
as.numeric(start.df[1,])
c(start.df[1,])
c(start.df[1,]) %>% class
route.df
start.df
end.df <- geocode(route.df$end)
end.df
end.df %>% class
start.ls
start.df
start.ls <- list(c(101.7259,3.106845), c(101.6188,3.032715))
start.ls
end.df
end.ls <- list(c(101.6188,3.032715), c(101.5945,3.127887))
route.vec(start.ls, end.ls, mode = 'driving')
route.vec <- Vectorize(route, vectorize.args = c('from', 'to'), SIMPLIFY = F)
result2 <- route.vec(start.ls, end.ls, mode = 'driving')
result2
route.df
start.df
end.df
result2
start.df
start.ls
end.df
end.ls
as.list(rep(NA, 4))
dummy.df <- as.list(rep(NA, 11))
data.frame(dummy.df)
result2[[2]] %>% result
result2[[2]] %>% str
dummy.df <- data.frame(1 = numeric(),2 = numeric(),3 = numeric(),4 = numeric(),5 = numeric(),6 = numeric(),7= numeric(),8=numeric(),9= numeric(),10= numeric(),11 = numeric())
dummy.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric(),numeric(),numeric(),numeric(),numeric(),integer())
dummy.df
colnames(dummy.df) <- colnames(result[[1]])
dummy.df
cbind(dummy.df, result[[1]])
rbind(dummy.df, result[[1]])
parse(text = colnames(dummy.df))
route.df
route1 <- result2[[1]]
route1
paste(route1$m, route1$km)
paste(route1$m, route1$km, ',')
paste(route1$m, route1$km, sep = ',')
mapply(c, route1$m, route$km)
mapply(c, route1$m, route1$km)
mapply(c, route1$m, route1$km) %>% as.list()
mapply(c, route1$m, route1$km) %>% list
mapply(c, route1$m, route1$km)
mapply(c, route1$m, route1$km) %>% apply(2, c)
mapply(c, route1$m, route1$km) %>% apply(2, list)
lapply(route1[,1:2], c)
apply(route1[,1:2], 1, list)
apply(route1[,1:2], 1, c)
list(route1[,1:2])
list(route1[,1],route[,2])
list(route1[,1],route1[,2])
as.list(paste(route1$m, route1$km))
mapply(list, route1$m, route1$km,SIMPLIFY = F)
mapply(list, route1$m, route1$km,SIMPLIFY = T)
mapply(list, route1$m, route1$km,SIMPLIFY = T)[[1]] %>% length
mapply(list, route1$m, route1$km,SIMPLIFY = T) %>% length
dim(route1)
> x <- 1:3
> y <- 4:6
x=1:3
y=4:6
list(x, y)
mapply(list, x, y, SIMPLIFY=F)
mapply(list, x, y, SIMPLIFY=F) %>% length
mapply(list, route1[[1]], route1[[2]], SIMPLIFY=F) %>% length
mapply(list, as.numeric(route1$m), as.numeric(route1$km), SIMPLIFY=F) %>% length
myroute
myroute
route.seq <- c('cheras', 'puchong', 'petaling jaya', 'shah alam')
route.df <- data.frame(start=route.seq[1:length(route.seq)-1], end = route.seq[2:length(route.seq)])
route.df$id <- ncol(route.df) %>% seq %>% as.numeric
route.vec <- Vectorize(route, vectorize.args = c('from','to'), SIMPLIFY = F)
route.ls <- route.vec(route.df$start, route.df$end, mode = 'driving', structure='legs')
route.seq <- c('cheras', 'puchong', 'petaling jaya', 'shah alam')
route.df <- data.frame(start=route.seq[1:length(route.seq)-1], end = route.seq[2:length(route.seq)])
route.df$id <- nrow(route.df) %>% seq %>% as.numeric
route.vec <- Vectorize(route, vectorize.args = c('from','to'), SIMPLIFY = F)
route.ls <- route.vec(route.df$start, route.df$end, mode = 'driving', structure='legs')
route.df
route.vec(route.df$start, route.df$end)
str(route.df)
route.seq <- c('cheras', 'puchong', 'petaling jaya', 'shah alam')
route.df <- data.frame(start=route.seq[1:length(route.seq)-1], end = route.seq[2:length(route.seq)]
, stringsAsFactors = F)
route.df$id <- nrow(route.df) %>% seq %>% as.numeric
route.vec <- Vectorize(route, vectorize.args = c('from','to'), SIMPLIFY = F)
route.ls <- route.vec(route.df$start, route.df$end, mode = 'driving', structure='legs')
route.ls
route.ls %>% length
route.ls[1]
route.ls[[1]]
lapply(seq(length(route.ls)), function(i,route.ls) {df <- route.ls[[i]]; df$id=i;route.df <- rbind(route.df,df); return()})
route.ls
lapply(seq(length(route.ls)), function(i) {df <- route.ls[[i]]; df$id=i;route.df <- rbind(route.df,df); return()})
dim(route.df)
lapply(seq(length(route.ls)), function(i) {df <- route.ls[[i]]; df$id=i;dummy.df <- rbind(dummy.df,df); return()})
dummy.df
lapply(seq(length(route.ls)), function(i) {df <- route.ls[[i]]; df$id=i;dummy.df <<- rbind(dummy.df,df); return()})
dummy.df
loc <- as.numeric(route.df[1,1:2])
loc
route.df
route.df[1,1:2]
as.numeric(route.df[1,1:2])
route.df[1,1:2] %>% unlist
route.df[1,1:2] %>% unlist %>% class
dummy.df[1, c('startLon', 'startLat')]
dummy.df[1, c('startLon', 'startLat')] %>% unlist
dummy.df[1, c('startLon', 'startLat')] %>% unlist
loc <- result.df[1, c('startLon', 'startLat')] %>% unlist
names(loc) <- c('lon', 'lat')
result.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric()
,numeric(),numeric(),numeric(),numeric(),integer(), numeric())
lapply(seq(length(route.ls)), function(i) {df <- route.ls[[i]]; df$id=i;dummy.df <<- rbind(result.df,df); return()})
loc <- result.df[1, c('startLon', 'startLat')] %>% unlist
names(loc) <- c('lon', 'lat')
result.df
result.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric()
,numeric(),numeric(),numeric(),numeric(),integer(), numeric())
lapply(seq(length(route.ls)), function(i) {df <- route.ls[[i]]; df$id=i;result.df <<- rbind(result.df,df); return()})
loc <- result.df[1, c('startLon', 'startLat')] %>% unlist
names(loc) <- c('lon', 'lat')
loc
qmap(loc, zoom = 10, maptype = 'roadmap', color = 'bw'
) + geom_leg(aes(x = startLon, y = startLat, xend = endLon, yend = endLat, color = as.factor(id)), data = legs_df)
qmap(loc, zoom = 10, maptype = 'roadmap', color = 'bw'
) + geom_leg(aes(x = startLon, y = startLat, xend = endLon, yend = endLat,
color = as.factor(as.character(id))), data = result.df)
qmap(loc, zoom = 12, maptype = 'roadmap', color = 'bw'
) + geom_leg(aes(x = startLon, y = startLat, xend = endLon, yend = endLat,
color = as.factor(as.character(id))), data = result.df)
qmap(loc, zoom = 11, maptype = 'roadmap', color = 'bw'
) + geom_leg(aes(x = startLon, y = startLat, xend = endLon, yend = endLat,
color = as.factor(as.character(id))), data = result.df)
qmplot(x = startLon, y = startLon, xend = endLon, yend=endLat,
data = result.df, color = as.factor(as.character(id)))
qmplot(x = startLon, y = startLon, xend = endLon, yend=endLat,geom='segment',
data = result.df, color = as.factor(as.character(id)))
qmplot(x = startLon, y = startLon, xend = endLon, yend=endLat,geom='segment',
data = result.df)
qmplot(x = startLon, y = startLon, xend = endLon, yend=endLat,geom='segment', zoom = 10
data = result.df)
qmplot(x = startLon, y = startLon, xend = endLon, yend=endLat,geom='segment', zoom = 10,
data = result.df)
head(result.df)
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 10,
data = result.df)
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 12,
data = result.df)
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 12,
data = result.df, color = as.factor(as.character(id)))
library(data.table)
result.dt <- data.table(result.df)
result.dt[,.SD[1], id]
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 12,
data = result.df, color = as.factor(as.character(id)), size = 2)
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 12,
data = result.df, color = as.factor(as.character(id)), size = I(1))
route.ls.path <- route.vec(route.df$start, route.df$end, mode = 'driving', structure='route')
route.ls.path
route.ls <- route.vec(route.df$start, route.df$end, mode = 'driving', structure='route')
legs.col_name <- c(m, km, miles, seconds, minutes, hours, startLon, startLat, endLon, endLat, leg, id)
result.legs.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric()
,numeric(),numeric(),numeric(),numeric(),integer(), numeric())
colnames(result.legs.df) <- legs.col.name
route.col_name <- c(m, km, miles, seconds, minutes, hours, leg, lon, lat, id)
result.route.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric()
,integer(), numeric(), numeric(), numeric())
colnames(result.route.df) <- route.col.name
legs.col.name <- c(m, km, miles, seconds, minutes, hours, startLon, startLat, endLon, endLat, leg, id)
result.legs.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric()
,numeric(),numeric(),numeric(),numeric(),integer(), numeric())
colnames(result.legs.df) <- legs.col.name
legs.col.name <- c('m', 'km', 'miles', 'seconds', 'minutes', 'hours', 'startLon', 'startLat', 'endLon', 'endLat', 'leg', 'id')
result.legs.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric()
,numeric(),numeric(),numeric(),numeric(),integer(), numeric())
colnames(result.legs.df) <- legs.col.name
lapply(seq(length(legs.ls)), function(i) {df <- legs.ls[[i]]; df$id=i;result.legs.df <<- rbind(result.legs.df,df); return()})
legs.ls <- route.vec(route.df$start, route.df$end, mode = 'driving', structure='legs')
lapply(seq(length(legs.ls)), function(i) {df <- legs.ls[[i]]; df$id=i;result.legs.df <<- rbind(result.legs.df,df); return()})
route.col.name <- c('m', 'km', 'miles', 'seconds', 'minutes', 'hours', 'leg', 'lon', 'lat', 'id')
result.route.df <- data.frame(numeric(),numeric(),numeric(),numeric(),numeric(),numeric()
,integer(), numeric(), numeric(), numeric())
colnames(result.route.df) <- route.col.name
lapply(seq(length(route.ls)), function(i) {df <- route.ls[[i]]; df$id=i;result.route.df <<- rbind(result.route.df,df); return()})
result.route.dt <- data.table(result.route.df)
loc.dt <- result.route.dt[,.SD[1], id]
loc.dt
result.route.dt
result.route.dt[,.SD[.N]]
loc.dt <- rbind(loc.dt, result.route.dt[.SD[.N]])
loc.dt
loc.dt
setorder(loc.dt, colnames(loc.dt)[2:ncol(loc.dt)], colnames(loc.dt)[1])
loc.dt
setcolorder(loc.dt, 2:ncol(loc.dt), 1)
setcolorder(loc.dt, c(2:ncol(loc.dt), 1))
loc.dt
loc.dt <- rbind(loc.dt, result.route.dt[.SD[.N]])
loc.dt
head(result.route.dt[.SD[.N]])
head(result.route.dt[,.SD[.N]])
loc.dt <- rbind(loc.dt, result.route.dt[,.SD[.N]])
loc.dt
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1)) + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6)
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1)) + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6))
qmplot(x = startLon, y = startLat, xend = endLon, yend=endLat,geom='segment', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1))
head(result.route.df)
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round')
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6)
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6, size = 3)
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6, size = 6)
loc.dt
loc.dt$location <- route.seq
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6, size = 6) + geom_text(
data=loc.dt, aes(x = lon, y = lat, label = location), family='Panton')
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6, size = 6) + geom_text(
data=loc.dt, aes(x = lon, y = lat, label = location),color = 'black', family='Panton', nudge_y = -1)
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6, size = 6) + geom_text(
data=loc.dt, aes(x = lon, y = lat, label = location),color = 'black', family='Panton', nudge_y = -.05)
qmplot(x = lon, y = lat,geom='path', zoom = 12,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6, size = 6) + geom_text(
data=loc.dt, aes(x = lon, y = lat, label = location),color = 'black', family='Panton', nudge_y = -.005)
qmplot(x = lon, y = lat,geom='path', zoom = 13,
data = result.route.df, color = as.factor(as.character(id)), size = I(1), linejoin='round') + geom_point(
data=loc.dt, aes(x=lon, y = lat),alpha=.6, size = 6) + geom_text(
data=loc.dt, aes(x = lon, y = lat, label = location),color = 'black', family='Panton', nudge_y = -.005)
route.all <- route('klcc, kuala lumpur', 'ioi mall, puchong', mode='driving', output = 'all', structure='route')
route.all
decodeLine <- function(encoded){
require(bitops)
vlen <- nchar(encoded)
vindex <- 0
varray <- NULL
vlat <- 0
vlng <- 0
while(vindex < vlen){
vb <- NULL
vshift <- 0
vresult <- 0
repeat{
if(vindex + 1 <= vlen){
vindex <- vindex + 1
vb <- as.integer(charToRaw(substr(encoded, vindex, vindex))) - 63
}
vresult <- bitOr(vresult, bitShiftL(bitAnd(vb, 31), vshift))
vshift <- vshift + 5
if(vb < 32) break
}
dlat <- ifelse(
bitAnd(vresult, 1)
, -(bitShiftR(vresult, 1)+1)
, bitShiftR(vresult, 1)
)
vlat <- vlat + dlat
vshift <- 0
vresult <- 0
repeat{
if(vindex + 1 <= vlen) {
vindex <- vindex+1
vb <- as.integer(charToRaw(substr(encoded, vindex, vindex))) - 63
}
vresult <- bitOr(vresult, bitShiftL(bitAnd(vb, 31), vshift))
vshift <- vshift + 5
if(vb < 32) break
}
dlng <- ifelse(
bitAnd(vresult, 1)
, -(bitShiftR(vresult, 1)+1)
, bitShiftR(vresult, 1)
)
vlng <- vlng + dlng
varray <- rbind(varray, c(vlat * 1e-5, vlng * 1e-5))
}
coords <- data.frame(varray)
names(coords) <- c("lat", "lon")
coords
}
route_df <- decodeLine( route.all$routes[[1]]$overview_polyline$points )
route_df
route.all
class(route.all)
dim(route_df)
route.all[[1]]$legs
route.all$routes
route.all$routes[[1]]
route.all$routes$legs
route.all$routes[[1]]$legs
route.all$routes[[1]]$legs[[1]]
route.all$routes[[1]]$legs[[1]]$steps
route.steps <- route.all$routes[[1]]$legs[[1]]$steps
route.steps
unlist(route.steps)
route.steps
route.steps[[1]]
route.steps[[1]] %>% length()
route.steps
route.steps.unlist <- unlist(route.steps)
length(route.steps.unlist)
route.steps
route.steps[[1]]
route.steps[[1]] %>% unlist %>% length
length(route.steps)
route.steps
route.steps[[1]]
route.steps[[1]]$distance$value
route.all
route.all[[1]]$steps
route.all[[1]]$step
route.all[[1]]
route.all
route.all[[1]]
route.all$routes
route.all$routes$legs
route.all$routes
route.all$routes[[1]]
route.all$routes[[1]]$legs
route.all$routes[[1]]$legs[[1]]$steps
route.all$routes[[1]]$legs[[1]]$steps[[1]]
route.steps <- route.all$routes[[1]]$legs[[1]]$steps
length(route.steps)
head(route_df)
qmplot(x=lat,y=lon,data=route_df, zoom=10, geom='path', linejoin='round',size=I(1), color=I('red'))
route_df
qmplot(x=lon,y=lat,data=route_df, zoom=10, geom='path', linejoin='round',size=I(1), color=I('red'))
qmplot(x=lon,y=lat,data=route_df, zoom=12, geom='path', linejoin='round',size=I(1), color=I('red'))
qmplot(x=lon,y=lat,data=route_df, zoom=13, geom='path', linejoin='round',size=I(1), color=I('red'))
qmplot(x=lon,y=lat,data=route_df, zoom=13, geom='path', linejoin='round',size=I(1), color=I('red'), alpha=.6)
library(caret)
library(ElemStatLearn)
library(rf)
library(randomForest)
library(dplyr)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
fitModel <- train(y~., method='rf', data=vowel.train, prox=T)
varImp(fitModel)
getwd()
setwd('/Users/Daniel/git_webpage/khun84.github.io')
library(knitr)
library(rmarkdown)
render_site()
render_site()
render_site()
treedt <- data.table(lvl1=sample(LETTERS[1:10], 10, replace = T),
lvl2=sample(LETTERS[1:10], 10, replace = T),
lvl3=sample(LETTERS[5:15]), 10, replace=T),
lvl4=sample(LETTERS[5:15], 10, replace=T),
lvl5=sample(LETTERS[16:25], 10))
treedt <- data.table(lvl1=sample(LETTERS[1:10], 10, replace = T),
lvl2=sample(LETTERS[1:10], 10, replace = T),
lvl3=sample(LETTERS[5:15], 10, replace=T),
lvl4=sample(LETTERS[5:15], 10, replace=T),
lvl5=sample(LETTERS[16:25], 10))
substitute(treedt)
deparse(substitute(treedt))
substitute(kable)
treedt
treedt <- data.table(lvl1=sample(LETTERS[1:5], 10, replace = T),
lvl2=sample(LETTERS[3:8], 10, replace = T),
lvl3=sample(LETTERS[5:15], 10, replace=T),
lvl4=sample(LETTERS[5:15], 10, replace=T),
lvl5=sample(LETTERS[16:25], 10))
treedt
my.picker <- picker(as.list(names(mtcars)))
manipulate(qplot(mpg, x = pick, data = mtcars, geom = 'point'), pick = my.picker)
require(manipulate)
my.picker <- picker(as.list(names(mtcars)))
manipulate(qplot(mpg, x = pick, data = mtcars, geom = 'point'), pick = my.picker)
my.picker <- picker(as.list(names(mtcars)))
manipulate(qplot(y=mpg, x = pick, data = mtcars, geom = 'point'), pick = my.picker)
as.list(names(mtcars))
qplot(mpg, cyl, data=mtcars)
names(mtcars)
my.picker <- picker(list(names(mtcars)))
manipulate(qplot(y=mpg, x = pick, data = mtcars, geom = 'point'), pick = my.picker)
my.picker <- picker(as.list(names(mtcars)), initial = 'cyl')
manipulate(qplot(y=mpg, x = pick, data = mtcars, geom = 'point'), pick = my.picker)
my.picker <- picker(as.list(names(mtcars)), initial = 'cyl')
manipulate(qplot(y=mpg, x = deparse(substitute(pick)), data = mtcars, geom = 'point'), pick = my.picker)
my.picker <- picker(as.list(names(mtcars)), initial = 'cyl')
manipulate(qplot(y=mpg, x = eval(parse(text = pick)), data = mtcars, geom = 'point'), pick = my.picker)
getwd()
render_site('index.Rmd')
fix(mtcars)
args(seq)
seq
x = seq(-pi, pi, length.out = 50)
length(x)
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
y = x
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
dim(f)
x1 <- 1:9
x1
x %o% x
x1 %o% x1
a = outer(x1,x1, function(x,y) c(x=x1, y=x2))
a = outer(x1,x1, function(x,y) c(x=x, y=y))
a = outer(x1,x1, function(x,y){x=x, y=y})
a = outer(x1,x1, function(x,y){c(x=x, y=y)})
a = outer(x1,x1, function(x,y){c(x,y)})
a = outer(x1,x1, function(x,y){list(x,y)})
a = outer(x1,x1, function(x,y) paste(x,y,sep = ','))
a
matrix(a, ncol = 1)
b = matrix(a, ncol = 1)
b
c = str_split(a, ',')
c
c = str_split(a, ',', simplify = T)
c
d = expand.grid(x1, x1)
head(d)
fa
head(f)
contour(x,y,f,nlevels=45,add=T)
plot.new()
contour(x,y,f,nlevels=45,add=T)
plot.new()
contour(x,y,f)
image(x,y,f)
fa=(f-t(f))/2
image(x,y,fa)
plot(cylinders, mpg,col="red", varwidth=T,horizontal=T))
plot(cylinders, mpg,col="red", varwidth=T,horizontal=T)
library(ISLR)
data(ISLR)
?ISLR
??ISLR
